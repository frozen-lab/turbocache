name: Tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # allow manual trigger
  workflow_dispatch:

jobs:
  clib-test:
    strategy:
      fail-fast: false
      
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            
          - os: ubuntu-24.04-arm
            arch: aarch64

          - os: windows-latest
            arch: x86_64
            
          - os: windows-11-arm
            arch: aarch64

          - os: macos-13
            arch: x86_64
            
          - os: macos-latest
            arch: aarch64
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ runner.os }}-rust
          key: ${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Rust Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Test aarch64 (NEON)
        if: matrix.arch == 'aarch64'
        run: cargo test --release -- --nocapture

      - name: Test x86_64 (SSE2)
        if: matrix.arch == 'x86_64' && runner.os != 'Windows'
        run: RUSTFLAGS="-C target-feature=+sse2" cargo test --release -- --nocapture

      - name: Test x86_64 (AVX2)
        if: matrix.arch == 'x86_64' && runner.os != 'Windows'
        run: RUSTFLAGS="-C target-feature=+avx2" cargo test --release -- --nocapture

      - name: Test x86_64 (SSE2) [WIN]
        if: matrix.arch == 'x86_64' && contains(matrix.os, 'windows')
        shell: pwsh
        env:
          RUSTFLAGS: "-C target-feature=+sse2"
        run: cargo test --release -- --nocapture

      - name: Test x86_64 (AVX2) [WIN]
        if: matrix.arch == 'x86_64' && contains(matrix.os, 'windows')
        shell: pwsh
        env:
          RUSTFLAGS: "-C target-feature=+avx2"
        run: cargo test --release -- --nocapture
     
